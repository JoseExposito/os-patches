---
 meson.build                             |    1 
 plugins/keyboard/gsd-keyboard-manager.c |   72 ++++++++++++++++++++++++++++++++
 plugins/keyboard/meson.build            |    1 
 3 files changed, 74 insertions(+)

--- a/meson.build
+++ b/meson.build
@@ -79,6 +79,7 @@ endif
 
 add_project_arguments(common_flags + compiler_flags, language: 'c')
 
+accountsservice_dep = dependency('accountsservice')
 colord_dep = dependency('colord', version: '>= 1.0.2')
 geocode_glib_dep = dependency('geocode-glib-1.0', version: '>= 3.10.0')
 gio_dep = dependency('gio-2.0', version: '>= 2.53.0')
--- a/plugins/keyboard/gsd-keyboard-manager.c
+++ b/plugins/keyboard/gsd-keyboard-manager.c
@@ -40,6 +40,8 @@
 #include <X11/XKBlib.h>
 #include <X11/keysym.h>
 
+#include <act/act.h>
+
 #include "gnome-settings-bus.h"
 #include "gnome-settings-profile.h"
 #include "gsd-keyboard-manager.h"
@@ -414,12 +416,75 @@ set_gtk_im_module (GSettings *settings,
 }
 
 static void
+user_notify_is_loaded_cb (GObject    *object,
+                          GParamSpec *pspec,
+                          gpointer    user_data)
+{
+        ActUser *user = ACT_USER (object);
+        GSettings *settings = user_data;
+
+        if (act_user_is_loaded (user)) {
+                GVariant *sources;
+                GVariantIter iter;
+                const gchar *type;
+                const gchar *name;
+                GVariantBuilder builder;
+
+                g_signal_handlers_disconnect_by_data (user, user_data);
+
+                sources = g_settings_get_value (settings, KEY_INPUT_SOURCES);
+
+                g_variant_builder_init (&builder, G_VARIANT_TYPE ("aa{ss}"));
+
+                g_variant_iter_init (&iter, sources);
+                while (g_variant_iter_next (&iter, "(&s&s)", &type, &name)) {
+                        g_variant_builder_open (&builder, G_VARIANT_TYPE ("a{ss}"));
+                        g_variant_builder_add (&builder, "{ss}", type, name);
+                        g_variant_builder_close (&builder);
+                }
+
+                g_variant_unref (sources);
+
+                sources = g_variant_ref_sink (g_variant_builder_end (&builder));
+                act_user_set_input_sources (user, sources);
+                g_variant_unref (sources);
+        }
+}
+
+static void
+manager_notify_is_loaded_cb (GObject    *object,
+                             GParamSpec *pspec,
+                             gpointer    user_data)
+{
+        ActUserManager *manager = ACT_USER_MANAGER (object);
+
+        gboolean loaded;
+        g_object_get (manager, "is-loaded", &loaded, NULL);
+
+        if (loaded) {
+                ActUser *user;
+
+                g_signal_handlers_disconnect_by_data (manager, user_data);
+
+                user = act_user_manager_get_user (manager, g_get_user_name ());
+
+                if (act_user_is_loaded (user))
+                        user_notify_is_loaded_cb (G_OBJECT (user), NULL, user_data);
+                else
+                        g_signal_connect (user, "notify::is-loaded",
+                                          user_notify_is_loaded_cb, user_data);
+        }
+}
+
+static void
 input_sources_changed (GSettings          *settings,
                        const char         *key,
                        GsdKeyboardManager *manager)
 {
         GSettings *interface_settings;
         GVariant *sources;
+        ActUserManager *user_manager;
+        gboolean user_manager_loaded;
         /* Gtk+ uses the IM module advertised in XSETTINGS so, if we
          * have IBus input sources, we want it to load that
          * module. Otherwise we can use the default "simple" module
@@ -430,6 +495,13 @@ input_sources_changed (GSettings
         set_gtk_im_module (interface_settings, sources);
         g_object_unref (interface_settings);
         g_variant_unref (sources);
+
+        user_manager = act_user_manager_get_default ();
+        g_object_get (user_manager, "is-loaded", &user_manager_loaded, NULL);
+        if (user_manager_loaded)
+                manager_notify_is_loaded_cb (G_OBJECT (user_manager), NULL, settings);
+        else
+                g_signal_connect (user_manager, "notify::is-loaded", G_CALLBACK (manager_notify_is_loaded_cb), settings);
 }
 
 static void
--- a/plugins/keyboard/meson.build
+++ b/plugins/keyboard/meson.build
@@ -4,6 +4,7 @@ sources = files(
 )
 
 deps = plugins_deps + [
+  accountsservice_dep,
   gtk_dep,
   libcommon_dep,
   x11_dep
